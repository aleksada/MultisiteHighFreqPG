#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
#sep <- 2
#load(here("results", "rain.15min.df.RData"))
#raindata <- matrix(rain.15min.df$rain[1:7680],960,8)
#sep <- 30
##load(here("results", "rain.hour.df.RData"))
#raindata <- matrix(rain.hour.df$rain[1:1920],240,8)
#sep <- 120
varlik.sp.var1.st <- function(params, data, coord, ut, nu){
NS <- ncol(data)
NT <- nrow(data)
sigma21 <- exp(params[1])/(1+exp(params[1]))  # The variance parameter B1
beta1 <- exp(params[2])    # The spatial range parameter B1
b0 <- exp(params[3])
b1 <- exp(params[4])
alpha <- exp(params[5]) #Skewness parameter
nu <- nu ## Degree of freedom
# Compute the variograms under the model
dist <- matrix(0, NS, NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <-
sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
# The covariance matrix under model with nugget effect
B1 <- sigma21 * matern(dist,beta1,1)
#if(eigen(B1)$values[1] >= 0.99) {
#   warning("The process is not stationary, return -1e16")
#  return(1e16)
# }
sigt_plus <- b0 + b1 * apply(data,1,mean)
##Construct the likelihood function
sum.lik <- 0
data.lag1 <- data[-1,]
for (s in 1:NS){
index.posi <- which(data.lag1[,s] > 0)
index.zero <- which(data.lag1[,s] == 0)
x <- (data.lag1[index.posi,s] - data[index.posi,] %*% B1[s,])/
sigt_plus[index.posi]
u <- (ut[index.zero + 1, s] - data[index.zero,] %*% B1[s,])/
sigt_plus[index.zero]
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
part1 <- dst(x, xi, omega, alpha, nu, log=TRUE) #First term
part2 <- log(sigt_plus[index.posi]) #Second term
part3 <- log(pst(u, xi, omega, alpha, nu)) #Third term
sum.lik <- sum.lik + sum(part1) - sum(part2) + sum(part3)
}
#message(c(sigma21,beta1,alpha,b0,b1))
return(-sum.lik)
}
varlik.sp.var1.norm <- function(params, data, coord, ut){
NS <- ncol(data)
NT <- nrow(data)
#sigma21 <- exp(params[1])
sigma21 <- exp(params[1])/(1+exp(params[1]))  # The variance parameter B1
beta1 <- exp(params[2])    # The spatial range parameter B1
b0 <- exp(params[3])
b1 <- exp(params[4])
# Compute the variograms under the model
dist <- matrix(0, NS, NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <-
sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
# The covariance matrix under model with nugget effect
B1 <- sigma21 * geoR::matern(dist,beta1,1)
sigt_plus <- b0 + b1 * apply(data,1,mean)
sum.lik <- 0
data.lag1 <- data[-1,]
for (s in 1:NS){
index.posi <- which(data.lag1[,s] > 0)
index.zero <- which(data.lag1[,s] == 0)
x <- (data.lag1[index.posi,s] - data[index.posi,] %*% B1[s,])/
sigt_plus[index.posi]
u <- (ut[index.zero + 1, s] - data[index.zero,] %*% B1[s,])/
sigt_plus[index.zero]
part1 <- dnorm(x, log=TRUE)
part2 <- log(sigt_plus[index.posi])
part3 <- pnorm(u,log.p=TRUE)
sum.lik <- sum.lik + sum(part1) - sum(part2) + sum(part3)
}
# message(c(sigma21,beta1,b0,b1))
return(-sum.lik)
}
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
#ht <- floor(sep * t/(2 * 60))%%24
dt <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 10
sint<- matrix(0, length(t), H)
sindt<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
#sint[,i] <- sin(2 * i * pi * ht/24)
sindt[,i] <- sin(2 * i * pi * dt/365)
cosdt[,i] <- cos(2 * i * pi * dt/365)
season.fit <- glm(binaryrain ~ cosdt[,1:i]  +  sindt[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + sindt[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
#ht <- floor(sep * t/(2 * 60))%%24
dt <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 10
cosdt<- matrix(0, length(t), H)
sindt<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
#sint[,i] <- sin(2 * i * pi * ht/24)
sindt[,i] <- sin(2 * i * pi * dt/365)
cosdt[,i] <- cos(2 * i * pi * dt/365)
season.fit <- glm(binaryrain ~ cosdt[,1:i]  +  sindt[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + sindt[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
#ht <- floor(sep * t/(2 * 60))%%24
dt <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 10
cosdt<- matrix(0, length(t), H)
sindt<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
#sint[,i] <- sin(2 * i * pi * ht/24)
sindt[,i] <- sin(2 * i * pi * dt/365)
cosdt[,i] <- cos(2 * i * pi * dt/365)
season.fit <- glm(binaryrain ~ cosdt[,1:i]  +  sindt[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ cosdt[,1:H.best] + sindt[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1.2
ut <- ifelse(ut>1.2,ut,1.2)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Threshold (mm/hr)")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
va<-c()
for (i in 1:10){
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 0.5
init[4] <- 0.5
init[5] <- 1 #positive skewness alpha from exploratory analysis
init <- log(init)
cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,method = "CG",
data = raindata, coord = coord, ut = ut, nu = i+2)
va[i]<-cov.optim.rslt.st$value
}
coord <- read.csv(here("data", "coords.csv"))
dim(coord)
coord$Easting <- coord$Easting/1000
coord$Northing <- coord$Northing/1000
dist(coord)
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- .5
init[4] <- .5
init[5] <- 1 #positive skewness alpha
init <- log(init)
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
#cov.optim.rslt.st.1 <- bobyqa(x0=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4)
cov.optim.rslt.st.1 <- neldermead(x0=init,fn = varlik.sp.var1.st,
data = raindata, coord = coord, ut = ut, nu = 4)
#cov.optim.rslt.st.1 <- lbfgs(x0=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4)
cov.optim.rslt.st.1
cov.optim.rslt <- cov.optim.rslt.st.1
# The covariance matrix under model with nugget effect
cov.sigma21 <- exp(cov.optim.rslt$par[1])/(1+exp(cov.optim.rslt$par[1]))
#cov.sigma21 <- exp(cov.optim.rslt$par[1])
cov.beta1 <- exp(cov.optim.rslt$par[2])
cov.b0 <- exp(cov.optim.rslt$par[3])
cov.b1 <- exp(cov.optim.rslt$par[4])
cov.alpha <- exp(cov.optim.rslt$par[5])
cov.optim.rslt <- cov.optim.rslt.st
cov.optim.rslt <- cov.optim.rslt.st.1
# The covariance matrix under model with nugget effect
cov.sigma21 <- exp(cov.optim.rslt$par[1])/(1+exp(cov.optim.rslt$par[1]))
#cov.sigma21 <- exp(cov.optim.rslt$par[1])
cov.beta1 <- exp(cov.optim.rslt$par[2])
cov.b0 <- exp(cov.optim.rslt$par[3])
cov.b1 <- exp(cov.optim.rslt$par[4])
cov.alpha <- exp(cov.optim.rslt$par[5])
cov.optim.rslt <- cov.optim.rslt
cov.fisher_info <- solve(cov.optim.rslt$hessian)
cov.optim.rslt
cov.sigma21
cov.beta1
cov.b0
cov.b1
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- .5
init[4] <- .5
init[5] <- 1 #positive skewness alpha
init <- log(init)
cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
data = raindata, coord = coord, ut = ut,
nu = 4,hessian = TRUE)
#cov.optim.rslt.st.1 <- bobyqa(x0=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4)
cov.optim.rslt.st.1 <- neldermead(x0=init,fn = varlik.sp.var1.st, data = raindata, coord = coord, ut = ut, nu = 4)
#cov.optim.rslt.st.1 <- lbfgs(x0=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4)
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 0.5
init[4] <- 0.5
init<-log(init)
cov.optim.rslt.norm <- optim(par = init,fn = varlik.sp.var1.norm, data = raindata, coord = coord, ut = ut, hessian = TRUE)
cov.optim.rslt <- cov.optim.rslt.st.1
# The covariance matrix under model with nugget effect
cov.sigma21 <- exp(cov.optim.rslt$par[1])/(1+exp(cov.optim.rslt$par[1]))
#cov.sigma21 <- exp(cov.optim.rslt$par[1])
cov.beta1 <- exp(cov.optim.rslt$par[2])
cov.b0 <- exp(cov.optim.rslt$par[3])
cov.b1 <- exp(cov.optim.rslt$par[4])
cov.alpha <- exp(cov.optim.rslt$par[5])
cov.optim.rslt <- cov.optim.rslt.st
cov.fisher_info <- solve(cov.optim.rslt$hessian)
cov.prop_sigma <- sqrt(diag(cov.fisher_info))
cov.upper <- cov.optim.rslt$par + 1.96 * cov.prop_sigma
cov.lower <- cov.optim.rslt$par - 1.96 * cov.prop_sigma
cov.interval <- data.frame(value = cov.optim.rslt$par, lower = cov.lower, upper = cov.upper)
back.trans.upper<-c(exp(cov.upper[1])/(1+exp(cov.upper[1])),exp(cov.upper[2:5]))
back.trans.lower<-c(exp(cov.lower[1])/(1+exp(cov.lower[1])),exp(cov.lower[2:5]))
back.trans.expect<-c(cov.sigma21,cov.beta1,cov.b0,cov.b1,cov.alpha)
back.trans.interval <- data.frame(value = back.trans.expect, lower = back.trans.lower, upper = back.trans.upper)
back.trans.interval
cov.optim.rslt$hessian
cov.fisher_info
cov.prop_sigma <- sqrt(diag(cov.fisher_info))
diag(cov.fisher_info)
cov.optim.rslt <- cov.optim.rslt.st.1
# The covariance matrix under model with nugget effect
cov.sigma21 <- exp(cov.optim.rslt$par[1])/(1+exp(cov.optim.rslt$par[1]))
#cov.sigma21 <- exp(cov.optim.rslt$par[1])
cov.beta1 <- exp(cov.optim.rslt$par[2])
cov.b0 <- exp(cov.optim.rslt$par[3])
cov.b1 <- exp(cov.optim.rslt$par[4])
cov.alpha <- exp(cov.optim.rslt$par[5])
cov.optim.rslt <- cov.optim.rslt.st
cov.fisher_info <- solve(cov.optim.rslt$hessian)
cov.prop_sigma <- sqrt(abs(diag(cov.fisher_info)))
cov.upper <- cov.optim.rslt$par + 1.96 * cov.prop_sigma
cov.lower <- cov.optim.rslt$par - 1.96 * cov.prop_sigma
cov.interval <- data.frame(value = cov.optim.rslt$par, lower = cov.lower, upper = cov.upper)
back.trans.upper<-c(exp(cov.upper[1])/(1+exp(cov.upper[1])),exp(cov.upper[2:5]))
back.trans.lower<-c(exp(cov.lower[1])/(1+exp(cov.lower[1])),exp(cov.lower[2:5]))
back.trans.expect<-c(cov.sigma21,cov.beta1,cov.b0,cov.b1,cov.alpha)
back.trans.interval <- data.frame(value = back.trans.expect, lower = back.trans.lower, upper = back.trans.upper)
back.trans.interval
cov.prop_sigma
cov.optim.rslt <- cov.optim.rslt.st.1
# The covariance matrix under model with nugget effect
cov.sigma21 <- exp(cov.optim.rslt$par[1])/(1+exp(cov.optim.rslt$par[1]))
#cov.sigma21 <- exp(cov.optim.rslt$par[1])
cov.beta1 <- exp(cov.optim.rslt$par[2])
cov.b0 <- exp(cov.optim.rslt$par[3])
cov.b1 <- exp(cov.optim.rslt$par[4])
cov.alpha <- exp(cov.optim.rslt$par[5])
cov.fisher_info <- solve(cov.optim.rslt.st$hessian)
cov.prop_sigma <- sqrt(abs(diag(cov.fisher_info)))
cov.upper <- cov.optim.rslt$par + 1.96 * cov.prop_sigma
cov.lower <- cov.optim.rslt$par - 1.96 * cov.prop_sigma
cov.interval <- data.frame(value = cov.optim.rslt$par, lower = cov.lower, upper = cov.upper)
back.trans.upper<-c(exp(cov.upper[1])/(1+exp(cov.upper[1])),exp(cov.upper[2:5]))
back.trans.lower<-c(exp(cov.lower[1])/(1+exp(cov.lower[1])),exp(cov.lower[2:5]))
back.trans.expect<-c(cov.sigma21,cov.beta1,cov.b0,cov.b1,cov.alpha)
back.trans.interval <- data.frame(value = back.trans.expect, lower = back.trans.lower, upper = back.trans.upper)
back.trans.interval
load(here("results", "estimation.cov.VAR1.RData"))
load(here("results", "rain.long.RData"))
raindata <- matrix(rain.long$rain[1:230400],28800,8)
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
NT <- nrow(raindata)
NS <- ncol(raindata)
sigma21.st <- results.VAR1$sigma21
beta1.st <- results.VAR1$beta1
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1.st <-  sigma21.st * matern(dist,beta1.st,1)
alpha <- results.VAR1$alpha
b0.st <- results.VAR1$b0
b1.st <- results.VAR1$b1
ut <- results.VAR1$ut
load(here("results", "estimation.cov.VAR1.norm.RData"))
load(here("results", "rain.long.RData"))
raindata <- matrix(rain.long$rain[1:230400],28800,8)
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
NT <- nrow(raindata)
NS <- ncol(raindata)
sigma21.norm <- results.VAR1.norm$sigma21
beta1.norm <- results.VAR1.norm$beta1
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1.norm <-  sigma21.norm * matern(dist,beta1.norm,1)
b0.norm <- results.VAR1.norm$b0
b1.norm <- results.VAR1.norm$b1
error.st <- matrix(0,NT,NS)
set.seed(4)
for(s in 1 :NS){
nu <- 4
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
error.st[,s] <- rst(NT, xi = xi, omega = omega, alpha, nu)
}
y.st <- matrix(0,NT,NS)
for(t in 2: NT){
y.st[t,] <- B1.st %*% raindata[t - 1,] + error.st[t,] * (b0.st + b1.st * mean(raindata[t - 1,]))
y.st[t,] <- ifelse(y.st[t,] > ut[t,], y.st[t,], 0)
}
error.norm <- matrix(0,NT,NS)
set.seed(4)
for(s in 1 :NS) error.norm[,s] <- rnorm(NT)
y.norm <- matrix(0,NT,NS)
for(t in 2: NT){
y.norm[t,] <- B1.norm %*% raindata[t - 1,] +
error.norm[t,] * (b0.norm + b1.norm * mean(raindata[t-1,]))
y.norm[t,] <- ifelse(y.norm[t,] > ut[t,], y.norm[t,], 0)
}
par(mfrow=c(3,3))
for (i in 1:8){
plot.ts(raindata[,i],
ylim = c(0, 0.1 + max(c(raindata[,i],round(y.st[,i])))))
lines(y.st[,i],col='grey')
}
qqplot(c(y.st), c(raindata))
abline(0,1)
par(mfrow=c(3,3))
for (i in 1:8){
plot.ts(raindata[,i],
ylim = c(0, 0.1 + max(c(raindata[,i],round(y.norm[,i])))))
lines(y.norm[,i],col='grey')
}
qqplot(c(y.norm), c(raindata))
abline(0,1)
nsims.app <- function(NT,NS,sigma21,beta1,b0,b1,alpha,nu,niters,true){
error <- array(0,c(NT,NS,niters))
y <- array(0,c(NT,NS,niters))
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * matern(dist,beta1,1)
for(iter in 1: niters){
for(s in 1 :NS){
nu <- nu
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
error[,s,iter] <- rst(NT, xi = xi, omega = omega, alpha, nu)
}
for(t in 2: NT){
y[t,,iter] <- B1 %*% true[t - 1,] +
error[t,,iter] * (b0 + b1 * mean(true[t - 1,]))
y[t,,iter] <- ifelse(y[t,,iter] > ut[t,], y[t,,iter], 0)
}
}
return(y)
}
nsims.app.norm <- function(NT,NS,sigma21,beta1,b0,b1,niters,true){
error <- array(0,c(NT,NS,niters))
y <- array(0,c(NT,NS,niters))
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * matern(dist,beta1,1)
for(iter in 1: niters){
for(s in 1 :NS){
error[,s,iter] <- rnorm(NT)
}
for(t in 2: NT){
y[t,,iter] <- B1 %*% true[t - 1,] +
error[t,,iter] * (b0 + b1 * mean(true[t - 1,]))
y[t,,iter] <- ifelse(y[t,,iter] > ut[t,], y[t,,iter], 0)
}
}
return(y)
}
set.seed(1)
niters<-50
app.sim <- nsims.app(NT,NS,sigma21.st,beta1.st,b0.st,b1.st,
alpha,4,niters,raindata)
app.sim.norm <- nsims.app.norm(NT,NS,sigma21.norm,beta1.norm,b0.norm,b1.norm,
niters,raindata)
quan.app<-quan.app.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
quan.app[j,]<- quantile(app.sim[,,j],1:10000/10000)
quan.app.norm[j,]<- quantile(app.sim.norm[,,j],1:10000/10000)
quan.app.true<- quantile(raindata,1:10000/10000)
}
quan.df.app <- data.frame(x=rep(quan.app.true,3),median=c(apply(quan.app,2,sort)[26,],apply(quan.app.norm,2,sort)[26,],quan.app.true),lower=c(apply(quan.app,2,sort)[2,],apply(quan.app.norm,2,sort)[2,],rep(NA,10000)),upper=c(apply(quan.app,2,sort)[49,],apply(quan.app.norm,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t Simulation",10000),rep("Gaussian Simulation",10000),rep("Observation",10000)))
p1
p1 <- ggplot(data = quan.df.app, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (count/epoch)") + xlab("Sample Quantiles (count/epoch)") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") + guides(colour=guide_legend(title="Data Type"),fill=guide_legend(title="Data Type"))
p1
p1 <- ggplot(data = quan.df.app, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (mm/hr)") + xlab("Sample Quantiles (mm/hr)") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") + guides(colour=guide_legend(title="Data Type"),fill=guide_legend(title="Data Type"))
p1
p1 <- ggplot(data = quan.df.app, aes(x=x, y=1.2*median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (mm/hr)") + xlab("Sample Quantiles (mm/hr)") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") + guides(colour=guide_legend(title="Data Type"),fill=guide_legend(title="Data Type"))
p1
p1 <- ggplot(data = quan.df.app, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (mm/hr)") + xlab("Sample Quantiles (mm/hr)") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") + guides(colour=guide_legend(title="Data Type"),fill=guide_legend(title="Data Type"))
p1
p1 <- ggplot(data = quan.df.app, aes(x=1.2*x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (mm/hr)") + xlab("Sample Quantiles (mm/hr)") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") + guides(colour=guide_legend(title="Data Type"),fill=guide_legend(title="Data Type"))
p1
ggsave(filename=here("results","qqapp.pdf"),device='pdf', plot=p1, width = 8, height = 5)
dist
max(dist)
1/(8*max(dist))
1.395/(8*max(dist))
