ggsave(filename=here("results","spatial.pdf"),device='pdf', plot=p2,width = 6, height = 5)
cons<-rle(c(raindata))
mattovec<-apply(app.sim,3,c)
mattovec.norm<-apply(app.sim.norm,3,c)
cons2<-apply(mattovec,2,rle)
cons2.norm<-apply(mattovec.norm,2,rle)
quan.cons<-quan.cons.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
quan.cons[j,]<- quantile(cons2[[j]]$length[cons2[[j]]$values==0],1:10000/10000,type = 6)
#quan.cons.norm[j,]<-quantile(cons2.norm[[j]]$length[cons2.norm[[j]]$values==0],1:10000/10000,type = 6)
quan.cons.true<- quantile(cons$length[cons$values==0],1:10000/10000,type = 6)
}
quan.cons<-data.frame(x=rep(quan.cons.true,3),median=c(apply(quan.cons,2,sort)[26,],quan.cons.true),lower=c(apply(quan.cons,2,sort)[2,],rep(NA,10000)),upper=c(apply(quan.cons,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Truth",10000)))
cons<-rle(c(raindata))
mattovec<-apply(app.sim,3,c)
mattovec.norm<-apply(app.sim.norm,3,c)
cons2<-apply(mattovec,2,rle)
cons2.norm<-apply(mattovec.norm,2,rle)
quan.cons<-quan.cons.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
quan.cons[j,]<- quantile(cons2[[j]]$length[cons2[[j]]$values==0],1:10000/10000,type = 6)
#quan.cons.norm[j,]<-quantile(cons2.norm[[j]]$length[cons2.norm[[j]]$values==0],1:10000/10000,type = 6)
quan.cons.true<- quantile(cons$length[cons$values==0],1:10000/10000,type = 6)
}
quan.cons<-data.frame(x=rep(quan.cons.true,2),median=c(apply(quan.cons,2,sort)[26,],quan.cons.true),lower=c(apply(quan.cons,2,sort)[2,],rep(NA,10000)),upper=c(apply(quan.cons,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Truth",10000)))
w.cons<-rle(c(raindata>0))
w.mattovec<-apply(app.sim>0,3,c)
w.mattovec.norm<-apply(app.sim.norm>0,3,c)
w.cons2<-apply(w.mattovec,2,rle)
w.cons2.norm<-apply(w.mattovec.norm,2,rle)
w.quan.cons<-w.quan.cons.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
w.quan.cons[j,]<- quantile(w.cons2[[j]]$length[w.cons2[[j]]$values==TRUE],1:10000/10000,type = 6)
w.quan.cons.norm[j,]<-quantile(w.cons2.norm[[j]]$length[w.cons2.norm[[j]]$values==TRUE],1:10000/10000,type = 6)
w.quan.cons.true<- quantile(w.cons$length[w.cons$values==TRUE],1:10000/10000,type = 6)
}
w.quan.cons<-data.frame(x=rep(w.quan.cons.true,2),median=c(apply(w.quan.cons,2,sort)[26,],w.quan.cons.true),lower=c(apply(w.quan.cons,2,sort)[2,],rep(NA,10000)),upper=c(apply(w.quan.cons,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Gaussian",10000),rep("Truth",10000)))
w.quan.cons<-data.frame(x=rep(w.quan.cons.true,2),median=c(apply(w.quan.cons,2,sort)[26,],w.quan.cons.true),lower=c(apply(w.quan.cons,2,sort)[2,],rep(NA,10000)),upper=c(apply(w.quan.cons,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Truth",10000)))
p.cons <- ggplot(data = quan.cons, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (count/epoch)") + xlab("Sample Quantiles (count/epoch)") +
ggtitle("The QQ-plot of the dry spell length") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p.cons
w.p.cons <- ggplot(data = w.quan.cons, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (count/epoch)") + xlab("Sample Quantiles (count/epoch)") +
ggtitle("The QQ-plot of the wet spell length") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
w.p.cons
ggsave(filename=here("results","wetlength.pdf"),device='pdf', plot=w.p.cons,width = 6, height = 5)
ggsave(filename=here("results","length.pdf"),device='pdf', plot=p.cons,width = 6, height = 5)
library(fields)
?spatialProcess
?library
library(here)
library(geoR)
library(sn)
library(cowplot)
load(here("results", "estimation.cov.VAR1.RData"))
load(here("results", "rain.long.RData"))
raindata <- matrix(rain.long$rain[1:230400],28800,8)
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
NT <- nrow(raindata)
NS <- ncol(raindata)
sigma21.st <- results.VAR1$sigma21
beta1.st <- results.VAR1$beta1
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
library(here)
library(readr)
rain1_table <- read.csv(here("data", "RaindataPerepoch.csv"), header=TRUE)
rain2_table <- read.csv(here("data", "RaindataPerhour.csv"), header=TRUE)
dim(rain1_table)
dim(rain2_table)
rain1_table[1:5, ]
par(mfrow=c(2,4))
for(i in 1: 8) hist(rain1_table[,i + 1])
table(rain1_table[,2])/28801
coord <- read.csv(here("data", "coords.csv"))
dim(coord)
coord$Easting <- coord$Easting/1000
coord$Northing <- coord$Northing/1000
dist(coord)
library(here)
library(reshape2)
library(ggplot2)
library(dplyr)
rain.raw <- read.csv(here("data","RaindataPerepoch.csv"))
rain.long <- melt(rain.raw[,1:9], id=c("date...time"))
rain.long <- data.frame(rain.long)
names(rain.long)<-c("dt","sites","rain")
rain.long$dt <- as.POSIXct(strptime(rain.long$dt,format="%d.%m.%Y  %H:%M:%S"))
rain.long$Date <- as.Date(rain.long$dt)
rain.long$Time <- format((rain.long$dt) ,format = "%H:%M:%S")
rainraw <- ggplot(rain.long,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") + ylab("Rainfall Amount")+ ggtitle(" Eight time series of rainfall amounts inside the Univeristy of Lausanne")
ggsave(filename=here("results","rainraw.pdf"), plot=rainraw, width = 11, height = 9)
#ggsave(filename="/Users/liy0h/Dropbox/My Research/rainfall paper/Paper ARmodel/rainraw.pdf", plot=rainraw, width = 8, height = 6.5)
histraw <- ggplot(rain.long,aes(rain))+geom_histogram(binwidth=.5)+ scale_y_sqrt() + xlab("Rainfall Amount") + ylab("Frequency") + ggtitle("(a) Histograms of the Rainfall Data")
ggsave(filename=here("results","histraw.jpeg"), plot=histraw, width = 6, height = 5)
ggsave(filename="/Users/liy0h/Dropbox/My Research/rainfall paper/Paper ARmodel/histraw.jpeg", plot=histraw, width = 6, height = 5)
qqraw <- ggplot(rain.long, aes(sample=rain))+ stat_qq()+geom_abline(slope=1, intercept=0) +
xlab("Theoretical") + ylab("Sample") +
ggtitle("(b) Normal QQ Plot of the Rainfall Data")
ggsave(filename=here("results","qqraw.jpeg"), plot=qqraw, width = 6, height = 5)
ggsave(filename="/Users/liy0h/Dropbox/My Research/rainfall paper/Paper ARmodel/qqraw.jpeg", plot=qqraw, width = 6, height = 5)
load(here("results", "estimation.cov.VAR1.RData"))
load(here("results", "rain.long.RData"))
raindata <- matrix(rain.long$rain[1:230400],28800,8)
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
NT <- nrow(raindata)
NS <- ncol(raindata)
sigma21.st <- results.VAR1$sigma21
beta1.st <- results.VAR1$beta1
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1.st <-  sigma21.st * matern(dist,beta1.st,1)
alpha <- results.VAR1$alpha
b0.st <- results.VAR1$b0
b1.st <- results.VAR1$b1
ut <- results.VAR1$ut
load(here("results", "estimation.cov.VAR1.norm.RData"))
load(here("results", "rain.long.RData"))
raindata <- matrix(rain.long$rain[1:230400],28800,8)
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
NT <- nrow(raindata)
NS <- ncol(raindata)
sigma21.norm <- results.VAR1.norm$sigma21
beta1.norm <- results.VAR1.norm$beta1
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1.norm <-  sigma21.norm * matern(dist,beta1.norm,1)
b0.norm <- results.VAR1.norm$b0
b1.norm <- results.VAR1.norm$b1
nsims.app <- function(NT,NS,sigma21,beta1,b0,b1,alpha,nu,niters,true){
error <- array(0,c(NT,NS,niters))
y <- array(0,c(NT,NS,niters))
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * matern(dist,beta1,1)
for(iter in 1: niters){
for(s in 1 :NS){
nu <- nu
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
error[,s,iter] <- rst(NT, xi = xi, omega = omega, alpha, nu)
}
for(t in 2: NT){
y[t,,iter] <- B1 %*% true[t - 1,] +
error[t,,iter] * (b0 + b1 * mean(true[t - 1,]))
y[t,,iter] <- ifelse(y[t,,iter] > ut[t,], y[t,,iter], 0)
}
}
return(y)
}
nsims.app.norm <- function(NT,NS,sigma21,beta1,b0,b1,niters,true){
error <- array(0,c(NT,NS,niters))
y <- array(0,c(NT,NS,niters))
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * matern(dist,beta1,1)
for(iter in 1: niters){
for(s in 1 :NS){
error[,s,iter] <- rnorm(NT)
}
for(t in 2: NT){
y[t,,iter] <- B1 %*% true[t - 1,] +
error[t,,iter] * (b0 + b1 * mean(true[t - 1,]))
y[t,,iter] <- ifelse(y[t,,iter] > ut[t,], y[t,,iter], 0)
}
}
return(y)
}
set.seed(4)
niters<-50
app.sim <- nsims.app(NT,NS,sigma21.st,beta1.st,b0.st,b1.st,
alpha,4,niters,raindata)
app.sim.norm<-nsims.app.norm(NT,NS,sigma21.norm,beta1.norm,b0.norm,b1.norm,
niters,raindata)
set.seed(4)
niters<-50
app.sim <- nsims.app(NT,NS,sigma21.st,beta1.st,b0.st,b1.st,
alpha,4,niters,raindata)
quan.app<-quan.app.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
quan.app[j,]<- quantile(app.sim[,,j],1:10000/10000)
quan.app.norm[j,]<- quantile(app.sim.norm[,,j],1:10000/10000)
quan.app.true<- quantile(raindata,1:10000/10000)
}
quan.df.app<-data.frame(x=rep(quan.app.true,3),median=c(apply(quan.app,2,sort)[26,],apply(quan.app.norm,2,sort)[26,],quan.app.true),lower=c(apply(quan.app,2,sort)[2,],apply(quan.app.norm,2,sort)[2,],rep(NA,10000)),upper=c(apply(quan.app,2,sort)[49,],apply(quan.app.norm,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Gaussian",10000),rep("Truth",10000)))
# Mode <- function(x, na.rm = FALSE) {
#   if(na.rm){
#     x = x[!is.na(x)]
#   }
#
#   ux <- unique(x)
#   return(ux[which.max(tabulate(match(x, ux)))])
# }
simutan<-apply(y.st,1,function(x){sum(x>0)})
error.st <- matrix(0,NT,NS)
set.seed(4)
for(s in 1 :NS){
nu <- 4
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
error.st[,s] <- rst(NT, xi = xi, omega = omega, alpha, nu)
}
y.st <- matrix(0,NT,NS)
for(t in 2: NT){
y.st[t,] <- B1.st %*% raindata[t - 1,] + error.st[t,] * (b0.st + b1.st * mean(raindata[t - 1,]))
y.st[t,] <- ifelse(y.st[t,] > ut[t,], y.st[t,], 0)
}
error.norm <- matrix(0,NT,NS)
set.seed(4)
for(s in 1 :NS) error.norm[,s] <- rnorm(NT)
y.norm <- matrix(0,NT,NS)
for(t in 2: NT){
y.norm[t,] <- B1.norm %*% raindata[t - 1,] +
error.norm[t,] * (b0.norm + b1.norm * mean(raindata[t-1,]))
y.norm[t,] <- ifelse(y.norm[t,] > ut[t,], y.norm[t,], 0)
}
# Mode <- function(x, na.rm = FALSE) {
#   if(na.rm){
#     x = x[!is.na(x)]
#   }
#
#   ux <- unique(x)
#   return(ux[which.max(tabulate(match(x, ux)))])
# }
simutan<-apply(y.st,1,function(x){sum(x>0)})
#simutan.norm<-apply(y.norm,1,function(x){sum(x>0)})
simutan.true<-apply(raindata,1,function(x){sum(x>0)})
spat.dep <- melt(data.frame(Truth=simutan.true,"Skew-t" = simutan))
cons<-rle(c(raindata))
mattovec<-apply(app.sim,3,c)
mattovec.norm<-apply(app.sim.norm,3,c)
cons2<-apply(mattovec,2,rle)
cons2.norm<-apply(mattovec.norm,2,rle)
quan.cons<-quan.cons.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
quan.cons[j,]<- quantile(cons2[[j]]$length[cons2[[j]]$values==0],1:10000/10000,type = 6)
#quan.cons.norm[j,]<-quantile(cons2.norm[[j]]$length[cons2.norm[[j]]$values==0],1:10000/10000,type = 6)
quan.cons.true<- quantile(cons$length[cons$values==0],1:10000/10000,type = 6)
}
quan.cons<-data.frame(x=rep(quan.cons.true,2),median=c(apply(quan.cons,2,sort)[26,],quan.cons.true),lower=c(apply(quan.cons,2,sort)[2,],rep(NA,10000)),upper=c(apply(quan.cons,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Truth",10000)))
w.cons<-rle(c(raindata>0))
w.mattovec<-apply(app.sim>0,3,c)
w.mattovec.norm<-apply(app.sim.norm>0,3,c)
w.cons2<-apply(w.mattovec,2,rle)
w.cons2.norm<-apply(w.mattovec.norm,2,rle)
w.quan.cons<-w.quan.cons.norm<-matrix(0,niters,10000)
for (j in 1 :niters){
w.quan.cons[j,]<- quantile(w.cons2[[j]]$length[w.cons2[[j]]$values==TRUE],1:10000/10000,type = 6)
w.quan.cons.norm[j,]<-quantile(w.cons2.norm[[j]]$length[w.cons2.norm[[j]]$values==TRUE],1:10000/10000,type = 6)
w.quan.cons.true<- quantile(w.cons$length[w.cons$values==TRUE],1:10000/10000,type = 6)
}
w.quan.cons<-data.frame(x=rep(w.quan.cons.true,2),median=c(apply(w.quan.cons,2,sort)[26,],w.quan.cons.true),lower=c(apply(w.quan.cons,2,sort)[2,],rep(NA,10000)),upper=c(apply(w.quan.cons,2,sort)[49,],rep(NA,10000)),Type=c(rep("Skew-t",10000),rep("Truth",10000)))
p1 <- ggplot(data = quan.df.app, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (count/epoch)") + xlab("Sample Quantiles (count/epoch)") +
ggtitle("QQ Plot of the Observation and Simulation Models") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p1
p2 <- ggplot(spat.dep,aes(group=variable,fill=variable)) +
geom_histogram(aes(value),binwidth=.5,position = position_dodge())+
xlab("Number of simutaneously rainy locations")+
ylab("Count")+
ggtitle("Histogram of Simultaneous Rain")
p2
p.cons <- ggplot(data = quan.cons, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (count/epoch)") + xlab("Sample Quantiles (count/epoch)") +
ggtitle("QQ-plot of the dry spell length") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p.cons
w.p.cons <- ggplot(data = w.quan.cons, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Empirical Quantiles (count/epoch)") + xlab("Sample Quantiles (count/epoch)") +
ggtitle("QQ-plot of the wet spell length") +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
w.p.cons
ggsave(filename=here("results","rainsim.pdf"),device='pdf', plot=rain.sim.plot,width = 8, height = 10)
combine_plot<-plot_grid( rain.sim.plot, rain.sim.plot.norm, align='h',rel_widths = 1.2, rel_heights = 1)
ggsave(filename=here("results","qqapp.pdf"),device='pdf', plot=p1, width = 6, height = 5)
ggsave(filename=here("results","spatial.pdf"),device='pdf', plot=p2,width = 6, height = 5)
ggsave(filename=here("results","length.pdf"),device='pdf', plot=p.cons,width = 6, height = 5)
ggsave(filename=here("results","wetlength.pdf"),device='pdf', plot=w.p.cons,width = 6, height = 5)
pdf("condidry.pdf",width=10, height=5)
par(mfrow=c(1,2))
plot(density(condi.prob[3,]),main='Wet|Dry',xlab="Transition probability",xlim=c(0,0.5),lwd=2,col=2)
load(here("results","sim.est.RData"))
nu.iter<-c(3,3,7,7,20,20)
alpha.iter<-c(0,5,0,5,0,5)
niters<-50
rmse.st<-rmse.norm<-matrix(0,6,niters)
true.sim<-array(0,c(NT,NS,6))
est.sim<-est.sim.norm<-array(0,c(NT,NS,niters,6))
for(i in 1:6){
true.sim[,,i] <- sims(10000,3,sigma21,beta1,b0,b1,alpha.iter[i],nu.iter[i])$y.sim
est.sim[,,,i] <- nsims(10000,3,mat.est[1,i],mat.est[2,i],mat.est[3,i],mat.est[4,i],
mat.est[5,i],nu.iter[i],niters)
est.sim.norm[,,,i]<-nsims(10000,3,mat.est[6,i],mat.est[7,i],mat.est[8,i],
mat.est[9,i],0,150,niters)
}
sims <- function(NT,NS,sigma21,beta1,b0,b1,alpha,nu){
error.sim <- matrix(0,NT,NS)
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * exp(-  dist/beta1)
set.seed(1)
for(s in 1 :NS){
nu <- nu
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
error.sim[,s] <- rst(NT, xi = xi, omega = omega, alpha=alpha, nu=nu)
}
y.sim <- matrix(0,NT,NS)
ut.sim <- ut[seq(1,28800,28800/NT),1:NS]
for(t in 2: NT){
y.sim[t,] <- B1 %*% y.sim[t - 1,] + error.sim[t,] * (b0 + b1 * mean(y.sim[t - 1,]))
y.sim[t,] <- ifelse(y.sim[t,] > ut.sim[t,], y.sim[t,], 0)
}
return(list(y.sim = y.sim, error.sim = error.sim))
}
library(here)
library(sn)
library(geoR)
library(ggplot2)
library(cowplot)
nsims <- function(NT,NS,sigma21,beta1,b0,b1,alpha,nu,niters){
error <- array(0,c(NT,NS,niters))
y <- array(0,c(NT,NS,niters))
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * exp(-dist/beta1)
for(iter in 1: niters){
for(s in 1 :NS){
nu <- nu
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
error[,s,iter] <- rst(NT, xi = xi, omega = omega, alpha, nu)
}
for(t in 2: NT){
y[t,,iter] <- B1 %*% y[t - 1,,iter] +
error[t,,iter] * (b0 + b1 * mean(y[t - 1,,iter]))
y[t,,iter] <- ifelse(y[t,,iter] > ut.sim[t,], y[t,,iter], 0)
}
}
return(y)
}
load(here("results","sim.est.RData"))
nu.iter<-c(3,3,7,7,20,20)
alpha.iter<-c(0,5,0,5,0,5)
niters<-50
rmse.st<-rmse.norm<-matrix(0,6,niters)
true.sim<-array(0,c(NT,NS,6))
est.sim<-est.sim.norm<-array(0,c(NT,NS,niters,6))
for(i in 1:6){
true.sim[,,i] <- sims(10000,3,sigma21,beta1,b0,b1,alpha.iter[i],nu.iter[i])$y.sim
est.sim[,,,i] <- nsims(10000,3,mat.est[1,i],mat.est[2,i],mat.est[3,i],mat.est[4,i],
mat.est[5,i],nu.iter[i],niters)
est.sim.norm[,,,i]<-nsims(10000,3,mat.est[6,i],mat.est[7,i],mat.est[8,i],
mat.est[9,i],0,150,niters)
}
NT <- 10000
NS <- 3
sigma21 <- 1/(NS+1)
beta1 <- 1
dist <- matrix(data = 0, nrow = NS, ncol = NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <- sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
B1 <-  sigma21 * exp(- dist/beta1)
b0 <- 0.5
b1 <- 0.5
alpha <- 3
nu <- 3
ut.sim <- ut[seq(1,28800,28800/NT),1:NS]
load(here("results","sim.est.RData"))
nu.iter<-c(3,3,7,7,20,20)
alpha.iter<-c(0,5,0,5,0,5)
niters<-50
rmse.st<-rmse.norm<-matrix(0,6,niters)
true.sim<-array(0,c(NT,NS,6))
est.sim<-est.sim.norm<-array(0,c(NT,NS,niters,6))
for(i in 1:6){
true.sim[,,i] <- sims(10000,3,sigma21,beta1,b0,b1,alpha.iter[i],nu.iter[i])$y.sim
est.sim[,,,i] <- nsims(10000,3,mat.est[1,i],mat.est[2,i],mat.est[3,i],mat.est[4,i],
mat.est[5,i],nu.iter[i],niters)
est.sim.norm[,,,i]<-nsims(10000,3,mat.est[6,i],mat.est[7,i],mat.est[8,i],
mat.est[9,i],0,150,niters)
}
for(i in 1:6){
for(j in 1:niters){
rmse.st[i,j] <- sqrt(mean((est.sim[,,j,i]-true.sim[,,i])^2))
rmse.norm[i,j] <- sqrt(mean((est.sim.norm[,,j,i]-true.sim[,,i])^2))
}
}
mrmse.st<-apply(rmse.st,1,mean)*100
mrmse.norm<-apply(rmse.norm,1,mean)*100
mrmse.norm/mrmse.st
dp.true<-sum(true.sim[,,2]==0)/length(true.sim[,,2])
dp.st<-dp.norm<-c()
for(i in 1: niters) {
dp.st[i]<-sum(est.sim[,,i,2]==0)/length(est.sim[,,i,2])
dp.norm[i]<-sum(est.sim.norm[,,i,2]==0)/length(est.sim.norm[,,i,2])
}
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=2,lty=2)
lines(density(dp.norm),col=3,lwd=2)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=2)
?points
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=2,lty=1)
points(density(dp.norm),col=3,lwd=2,pch=16)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=2)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
points(density(dp.norm),col=3,lwd=1,pch=16)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=1)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
points(density(dp.norm),col=3,lwd=1)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=1)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
lines(density(dp.norm),col=3,lwd=1,lty=3)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
lines(density(dp.norm),col=3,lwd=1,lty=4)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=1)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
lines(density(dp.norm),col=3,lwd=1,lty=5)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=1)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
lines(density(dp.norm),col=3,lwd=1,lty=6)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=1)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=1,lty=1)
lines(density(dp.norm),col=3,lwd=1,lty=3)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=1)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=2,lty=1)
lines(density(dp.norm),col=3,lwd=2,lty=3)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=2,lty=c(1,2,3))
pdf("dryprob.pdf",width=8, height=6)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=2,lty=1)
lines(density(dp.norm),col=3,lwd=2,lty=3)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=2,lty=c(1,2,3))
dev.off()
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=2,lty=1)
lines(density(dp.norm),col=4,lwd=2,lty=3)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,3),lwd=2,lty=c(1,2,3))
pdf("dryprob.pdf",width=8, height=6)
plot(density(dp.st),xlim=c(0.9,1),xlab="Probability",col=2,lwd=2,lty=2,main="Dry Probability")
abline(v=dp.true,col=1,lwd=2,lty=1)
lines(density(dp.norm),col=4,lwd=2,lty=3)
legend("topleft",c("Truth","Skew-t Error","Gaussian Error"),col=c(1,2,4),lwd=2,lty=c(1,2,3))
dev.off()
