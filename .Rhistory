}
#message(c(sigma21,beta1,alpha,b0,b1))
return(-sum.lik)
}
varlik.sp.var1.norm <- function(params, data, coord, ut){
NS <- ncol(data)
NT <- nrow(data)
#sigma21 <- exp(params[1])
sigma21 <- exp(params[1])/(1+exp(params[1]))  # The variance parameter B1
beta1 <- exp(params[2])    # The spatial range parameter B1
b0 <- exp(params[3])
b1 <- exp(params[4])
# Compute the variograms under the model
dist <- matrix(0, NS, NS) # The distances between locations
for (i in 1:NS) {
for (j in 1:NS) {
dist[i,j] <-
sqrt((coord[i,2]-coord[j,2])^2+(coord[i,3]-coord[j,3])^2)
}
}
# The covariance matrix under model with nugget effect
B1 <- sigma21 * geoR::matern(dist,beta1,1)
sigt_plus <- b0 + b1 * apply(data,1,mean)
sum.lik <- 0
data.lag1 <- data[-1,]
for (s in 1:NS){
index.posi <- which(data.lag1[,s] > 0)
index.zero <- which(data.lag1[,s] == 0)
x <- (data.lag1[index.posi,s] - data[index.posi,] %*% B1[s,])/
sigt_plus[index.posi]
u <- (ut[index.zero + 1, s] - data[index.zero,] %*% B1[s,])/
sigt_plus[index.zero]
part1 <- dnorm(x, log=TRUE)
part2 <- log(sigt_plus[index.posi])
part3 <- pnorm(u,log.p=TRUE)
sum.lik <- sum.lik + sum(part1) - sum(part2) + sum(part3)
}
# message(c(sigma21,beta1,b0,b1))
return(-sum.lik)
}
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i] + cost[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + cost[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
?glm
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i] + cost[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + cost[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i] + cost[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + cost[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i] + cost[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + cost[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + cost[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 5
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i] + cost[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best] + cost[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
ht <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 10
sint<- matrix(0, length(t), H)
cost<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
sint[,i] <- sin(2 * i * pi * ht/365)
cost[,i] <- cos(2 * i * pi * ht/365)
season.fit <- glm(binaryrain ~ sint[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sint[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
rain.ut <- rain.long[-(1:8)*28801,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainfall Amount (count/epoch)") +
ggtitle("Fitted cutoffs with seasonality at eight locations")
ggsave(filename=here("results","ut.pdf"), plot=utfit, width = 11, height = 9)
#' ---
#' title: Make All
#' author: Yuxiao Li
#' date: "`r Sys.Date()`"
#' output: github_document
#' ---
library(here)
library(rmarkdown)
if(!dir.exists(here("results"))){
dir.create(here("results"))
}
files_in_r_to_run <-
c("01_gather_data.R",
"02_describing_raw_data.Rmd",
"03_preprocessing_data.Rmd",
"04_estimating_parameters.Rmd",
"05_inference_and_simulation.Rmd",
"11_simulation_study.Rmd")
for(i1 in 1:length(files_in_r_to_run)){
rmarkdown::render(here("R", files_in_r_to_run[i1]),
output_format =
github_document(html_preview = TRUE, toc = TRUE),
output_dir = here("results"))
}
warnings()
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
combine_plot<-plot_grid(p, p2, align='h',rel_widths = 1.2, rel_heights = 1)
ggsave(filename=here("results","qqsim.pdf"),device='pdf', plot=combine_plot, width = 12, height = 5)
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,3.6))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous()+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,max(median)))+scale_x_continuous(c(1,max(x)))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,3.6))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,3))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,Inf))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,2))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous()+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,5))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
p2 <- ggplot(data = quan.df2, aes(x=x, y=median, colour=Type)) +
geom_line(size=0.8) + ylab("Quantile") + xlab("Quantile") +
ggtitle(expression(paste("(b) QQ-plot of the two models when ",
nu,"=20, ",alpha,"=0"))) +
scale_y_continuous(limits = c(1,6))+scale_x_continuous(limits = c(1,4.2))+
geom_ribbon(aes(ymin=lower, ymax=upper,fill=Type), linetype=2, alpha=0.3) +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
p2
combine_plot<-plot_grid(p, p2, align='h',rel_widths = 1.2, rel_heights = 1)
ggsave(filename=here("results","qqsim.pdf"),device='pdf', plot=combine_plot, width = 12, height = 5)
qqraw <- ggplot(rain.long, aes(sample=rain))+ stat_qq()+geom_abline(slope=1, intercept=0) +
xlab("Theoretical") + ylab("Sample") +
ggtitle("(b) Normal QQ Plot of the Rainfall Data")
qqraw
ggsave(filename=here("results","qqraw.jpg"), plot=qqraw, width = 6, height = 5)
