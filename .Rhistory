NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.3
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- lbfgs(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),10,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
cov.optim.rslt.st
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.3
init[2] <- 1 #spatial range
init[3] <- 0.5
init[4] <- 0.5
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- lbfgs(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),100,0.5,0.5,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
cov.optim.rslt.st
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.3
init[2] <- 1 #spatial range
init[3] <- 0.5
init[4] <- 0.5
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- lbfgs(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),10,10,10,100),
data = raindata, coord = coord, ut = matrix(1,NT,NS), nu = nu.best)
cov.optim.rslt.st
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.3
init[2] <- 1 #spatial range
init[3] <- 0.5
init[4] <- 0.5
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- lbfgs(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(1,10,10,10,100),
data = raindata, coord = coord, ut = matrix(1,NT,NS), nu = nu.best)
cov.optim.rslt.st
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.3
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- neldermead(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/16),10,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- neldermead(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/16),10,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
cov.optim.rslt.st
p1
p2
start_time <- Sys.time()
library(here)
library(readr)
if (!dir.exists(here("results"))) {
cat("creating results/ directory\n")
dir.create(here("results"))
}
#rain1_table <- read.csv(here("data", "RaindataPerepoch.csv"), header=TRUE)
rain1_table <- read.csv(here("data", "RaindataPerhour.csv"), header=TRUE)
dim(rain1_table)
#dim(rain2_table)
rain1_table[1:5, ]
par(mfrow=c(2,4))
for(i in 1: 8) hist(rain1_table[,i + 1])
table(rain1_table[,2])/28801
par(mfrow=c(2,4))
for(i in 1: 8) hist(rain1_table[,i + 1])
rain_pattern <- cut(rain1_table,breaks=c(0,2,10,20))
par(mfrow=c(2,4))
for(i in 1: 8) hist(rain1_table[,i + 1])
rain_pattern <- cut(rain1_table[,2:9],breaks=c(0,2,10,20))
par(mfrow=c(2,4))
for(i in 1: 8) hist(rain1_table[,i + 1])
rain_pattern <- cut(c(rain1_table[,2:9]),breaks=c(0,2,10,20))
c(rain1_table[,2:9])
library(here)
library(readr)
if (!dir.exists(here("results"))) {
cat("creating results/ directory\n")
dir.create(here("results"))
}
#rain1_table <- read.csv(here("data", "RaindataPerepoch.csv"), header=TRUE)
rain1_table <- read.csv(here("data", "RaindataPerhour.csv"), header=TRUE)
dim(rain1_table)
#dim(rain2_table)
rain1_table[1:5, ]
par(mfrow=c(2,4))
for(i in 1: 8) hist(rain1_table[,i + 1])
coord <- read.csv(here("data", "coords.csv"))
dim(coord)
coord$Easting <- coord$Easting/1000
coord$Northing <- coord$Northing/1000
dist(coord)
end_time <- Sys.time()
runtime_02 <- end_time-start_time
runtime_02
start_time <- Sys.time()
library(here)
library(reshape2)
library(ggplot2)
library(dplyr)
#library(cowplot)
rain.raw <- read.csv(here("data","RaindataPerhour.csv"))
rain.long <- melt(rain.raw[,1:9], id=c("date...time"))
rain.long <- data.frame(rain.long)
names(rain.long)<-c("dt","sites","rain")
rain.long$dt <- as.POSIXct(strptime(rain.long$dt,format="%d.%m.%Y  %H:%M:%S"))
rain.long$Date <- as.Date(rain.long$dt)
rain.long$Time <- format((rain.long$dt) ,format = "%H:%M:%S")
rainraw <- ggplot(rain.long,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") + ylab("Rainfall Amount")
ggsave(filename=here("results","rainraw.pdf"), plot=rainraw, width = 11, height = 9)
rainraw <- ggplot(rain.long,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") + ylab("Rainfall Amount (mm/h)")
ggsave(filename=here("results","rainraw.pdf"), plot=rainraw, width = 11, height = 9)
rainraw <- ggplot(rain.long,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") + ylab("Rain rate (mm/h)")
ggsave(filename=here("results","rainraw.pdf"), plot=rainraw, width = 11, height = 9)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 10)+ scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 20)+ scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 50)+ scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 30)+ scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
rainraw.pos<-rain.long[rain.long$rain>0,]
qq_raw.pos <- ggplot(rainraw.pos, aes(sample=rain)) +
stat_qq(alpha=0.5) + stat_qq_line() +
xlab("Theoretical") + ylab("Sample")
ggsave(filename=here("results","qq_raw.pdf"), plot=qq_raw.pos, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 30)+ scale_x_log10()+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 20)+ scale_x_log10()+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 20)+ scale_x_log10()+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")+xlim(c(0,10000))
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 20)+ scale_x_log10()+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")+ylim(c(0,10000))
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(bins = 20)+ scale_x_log10()+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
rain_15min <- ggplot(rain.15min.df,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") + ylab("Rainfall Amount (Epoch Per Hour)")#+ ggtitle("Eight time series of 15-min rainfall inside the Univeristy of Lausanne")
cut(rain.raw[-28801,2:9],c(0,1,5,10,50))
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,5,10,50))
table(rain_dist) ##The last point was removed to get 10-day data
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,5,10))
table(rain_dist) ##The last point was removed to get 10-day data
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,5,10,10))
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,5,10,50))
table(rain_dist) ##The last point was removed to get 10-day data
table(unlist(rain.raw[-28801,2:9])
)
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,0,5,10,50))
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,2,5,10,50),include.lowest = TRUE)
table(rain_dist) ##The last point was removed to get 10-day data
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,5,10,50),include.lowest = TRUE)
table(rain_dist) ##The last point was removed to get 10-day data
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,2,3,4,5,10,50),include.lowest = TRUE)
table(rain_dist) ##The last point was removed to get 10-day data
?table
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=c("=0","(0,1.2]","(1.2,5]","(5,10]",">10")
tab
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=c("=0","(0,1.2]","(1.2,5]","(5,10]",">10")
tab
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=c(" = 0","(0,1.2]","(1.2,5]","(5,10]"," > 10")
tab
table(unlist(rain.raw[-28801,2:9]))
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=c(" = 0","(0,1.2]","(1.2,5]","(5,10]","(10,33.6 ]")
tab
rain_dist = cut(unlist(rain.raw[-28801,2:9]),c(0,1,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=c(" = 0","(0,1.2]","(1.2,5]","(5,10]","(10,33.6]")
names(tab)
hist(rain_dist)
?geom_histogram
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(breaks = c(0,2,5,10,50))+ scale_x_log10()+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
hist_raw <- ggplot(rain.long,aes(rain)) + geom_histogram(breaks = c(0,2,5,10,50))+scale_y_log10() + xlab("Rainfall Amount") + ylab("Frequency (in log scale)")
#histraw
ggsave(filename=here("results","hist_raw.pdf"), plot=hist_raw, width = 7, height = 5)
rain_dist = cut(unlist(rain.raw[-28800,2:9]),c(0,1,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=
c(" = 0", "(0,1.2]", "(1.2,5]", "(5,10]", "(10,33.6]")
tab
length(rain_dist)
rain_dist = cut(unlist(rain.raw[-28800,2:9]),c(0,1,1.2,5,10,50),include.lowest = TRUE)
tab = table(rain_dist) ##The last point was removed to get 10-day data
names(tab)=
c(" = 0", "(0,1.2]", "(1.2,5]", "(5,10]", "(10,33.6]")
tab
212897+12777+4245+439+42
212897/230400
library(here)
library(sn)
library(geoR)
library(reshape2)
library(nloptr)
#load(here("results", "rain.long.RData"))
#sep <- 1
#raindata <- matrix(rain.long$rain[1:230400],28800,8)
#load(here("results", "rain.1min.df.RData"))
#sep <- 2
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
load(here("results", "rain.15min.df.RData"))
load(here("results", "rain.long.RData"))
save(rain.long, file=here("results", "rain.long.RData"))
#save(rain.1min.df, file=here("results", "rain.1min.df.RData"))
#save(rain.15min.df, file=here("results", "rain.15min.df.RData"))
#save(rain.hour.df, file=here("results", "rain.hour.df.RData"))
#write.csv(rain.15min.df,file=here("results", "rain.15min.df.csv"))
load(here("results", "rain.long.RData"))
sep <- 1
raindata <- matrix(rain.long$rain[1:230400],28800,8)
#load(here("results", "rain.1min.df.RData"))
#sep <- 2
#raindata <- matrix(rain.1min.df$rain[1:115200],14400,8)
#load(here("results", "rain.15min.df.RData"))
#sep <- 30
#raindata <- matrix(rain.15min.df$rain[1:7680],960,8)
##load(here("results", "rain.hour.df.RData"))
#raindata <- matrix(rain.hour.df$rain[1:1920],240,8)
#sep <- 120
varlik.sp.var1.st <- function(params, data, coord, ut, nu){
NS <- ncol(data)
NT <- nrow(data)
sigma21 <- params[1]  # The variance parameter B1
beta1 <- params[2]    # The spatial range parameter B1
b0 <- params[3]
b1 <- params[4]
alpha <- params[5] #Skewness parameter
nu <- nu ## Degree of freedom
# Compute the variograms under the model
distance <- as.matrix(dist(coord[,2:3], diag = TRUE, upper = TRUE))
# The covariance matrix under model with nugget effect
B1 <- sigma21 ^ 2 * exp(- (distance/beta1)^2)
sigt_plus <- b0 + b1 * apply(data,1,mean)
##Construct the likelihood function
sum.lik <- 0
data.lag1 <- data[-1,]
for (s in 1:NS){
index.posi <- which(data.lag1[,s] > 0)
index.zero <- which(data.lag1[,s] == 0)
x <- (data.lag1[index.posi,s] - data[index.posi,] %*% B1[s,])/
sigt_plus[index.posi]
u <- (ut[index.zero + 1, s] - data[index.zero,] %*% B1[s,])/
sigt_plus[index.zero]
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
part1 <- dst(x, xi, omega, alpha, nu, log=TRUE) #First term
part2 <- log(sigt_plus[index.posi]) #Second term
part3 <- log(pst(u, xi, omega, alpha, nu)) #Third term
sum.lik <- sum.lik + sum(part1) - sum(part2) + sum(part3)
}
#message(c(sigma21,beta1,alpha,b0,b1))
return(-sum.lik)
}
varlik.sp.var1.st <- function(params, data, coord, ut, nu){
NS <- ncol(data)
NT <- nrow(data)
sigma21 <- params[1]  # The variance parameter B1
beta1 <- params[2]    # The spatial range parameter B1
b0 <- params[3]
b1 <- params[4]
alpha <- params[5] #Skewness parameter
nu <- nu ## Degree of freedom
# Compute the variograms under the model
distance <- as.matrix(dist(coord[,2:3], diag = TRUE, upper = TRUE))
# The covariance matrix under model with nugget effect
B1 <- sigma21 ^ 2 * exp(- (distance/beta1)^2)
sigt_plus <- b0 + b1 * apply(data,1,mean)
##Construct the likelihood function
sum.lik <- 0
data.lag1 <- data[-1,]
for (s in 1:NS){
index.posi <- which(data.lag1[,s] > 0)
index.zero <- which(data.lag1[,s] == 0)
x <- (data.lag1[index.posi,s] - data[index.posi,] %*% B1[s,])/
sigt_plus[index.posi]
u <- (ut[index.zero + 1, s] - data[index.zero,] %*% B1[s,])/
sigt_plus[index.zero]
bvdelta <- sqrt(nu) * gamma(1/2 * (nu - 1))/sqrt(pi)/gamma(1/2 * nu) *
alpha/sqrt(1 + alpha^2)
omega <- 1/sqrt((nu/(nu-2) - bvdelta^2))
xi<- -omega * bvdelta
part1 <- dst(x, xi, omega, alpha, nu, log=TRUE) #First term
part2 <- log(sigt_plus[index.posi]) #Second term
part3 <- log(pst(u, xi, omega, alpha, nu)) #Third term
sum.lik <- sum.lik + sum(part1) - sum(part2) + sum(part3)
}
#message(c(sigma21,beta1,alpha,b0,b1))
return(-sum.lik)
}
varlik.sp.var1.norm <- function(params, data, coord, ut){
NS <- ncol(data)
NT <- nrow(data)
#sigma21 <- exp(params[1])
sigma21 <- params[1]  # The variance parameter B1
beta1 <- params[2]    # The spatial range parameter B1
b0 <- params[3]
b1 <- params[4]
# Compute the variograms under the model
distance <- as.matrix(dist(coord[,2:3], diag = TRUE, upper = TRUE))
# The covariance matrix under model with nugget effect
B1 <- sigma21^2 * exp(- (distance/beta1)^2)
sigt_plus <- b0 + b1 * apply(data,1,mean)
sum.lik <- 0
data.lag1 <- data[-1,]
for (s in 1:NS){
index.posi <- which(data.lag1[,s] > 0)
index.zero <- which(data.lag1[,s] == 0)
x <- (data.lag1[index.posi,s] - data[index.posi,] %*% B1[s,])/
sigt_plus[index.posi]
u <- (ut[index.zero + 1, s] - data[index.zero,] %*% B1[s,])/
sigt_plus[index.zero]
part1 <- dnorm(x, log=TRUE)
part2 <- log(sigt_plus[index.posi])
part3 <- pnorm(u,log.p=TRUE)
sum.lik <- sum.lik + sum(part1) - sum(part2) + sum(part3)
}
# message(c(sigma21,beta1,b0,b1))
return(-sum.lik)
}
ut.fun <- function(data,sep){
binaryrain <- data > 0
NT <- length(binaryrain)
t <- (1:NT)-1
#    ht <- floor(sep * t/(2 * 60))%%24
dt <- floor(94.5 + sep * t/(2 * 60 * 24))
H <- 10
#    sint<- matrix(0, length(t), H)
#    cost<- matrix(0, length(t), H)
sindt<- matrix(0, length(t), H)
cosdt<- matrix(0, length(t), H)
save.aic <- rep(0,H)
for(i in 1:H){
#    sint[,i] <- sin(2 * i * pi * ht/24)
#    cost[,i] <- cos(2 * i * pi * ht/24)
sindt[,i] <- sin(2 * i * pi * dt/365)
cosdt[,i] <- cos(2 * i * pi * dt/365)
season.fit <- glm(binaryrain ~ sindt[,1:i] + cosdt[,1:i],family = "binomial")
save.aic[i] <- AIC(season.fit)
}
H.best <- which(save.aic == min(save.aic))
season.fit.best <- glm(binaryrain ~ sindt[,1:H.best] + cosdt[,1:H.best], family="binomial")
fitted <- season.fit.best$fitted
ut <- quantile(data, 1 - fitted)
return(ut)
}
ut <- matrix(0,nrow(raindata),ncol(raindata))
for (i in 1: ncol(raindata)){
ut[,i] <- ut.fun(raindata[,i],sep=sep)
}
ut[nrow(raindata),] <- 1
ut <- ifelse(ut>1,ut,1)
ut <- ifelse(ut>1.2,ut,1.2)
rain.ut <- rain.long[1:230400,]
#rain.ut <- rain.15min.df[1:7680,]
#rain.ut <- rain.1min.df[1:115200,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainrate Threshold (mm/hr)")
ggsave(filename=here("results","ut_15min.pdf"), plot=utfit, width = 11, height = 9)
rain.ut <- rain.long[1:230400,]
#rain.ut <- rain.15min.df[1:7680,]
#rain.ut <- rain.1min.df[1:115200,]
rain.ut$rain <- melt(ut)$value
utfit<-ggplot(rain.ut,aes(y=rain,x=dt,group=sites,colour=sites))+
geom_line()+facet_grid(sites ~ .) + xlab("Data and Time") +
ylab("Rainrate threshold (mm/hr)")
ggsave(filename=here("results","ut_raw.pdf"), plot=utfit, width = 11, height = 9)
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 7
cov.optim.rslt.st <- neldermead(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),10,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 4
cov.optim.rslt.st <- neldermead(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),10,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
cov.optim.rslt.st
0.3364520^2
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 4
cov.optim.rslt.st <- bfgs(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),1000,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
NT <- nrow(raindata)
NS <- ncol(raindata)
init <- c()
#init[1] <- 0.1/(1/NS-0.1) #variance
init[1] <- 0.1
init[2] <- 1 #spatial range
init[3] <- 1
init[4] <- 1
init[5] <- 10 #positive skewness alpha
#cov.optim.rslt.st <- optim(par=init,fn = varlik.sp.var1.st,
#                    data = raindata, coord = coord, ut = ut, nu = 4,
#                    hessian = TRUE)
nu.best <- 4
cov.optim.rslt.st <- lbfgs(x0=init,fn = varlik.sp.var1.st,
lower = c(0,0,0,0,-10),upper = c(sqrt(1/8),1000,10,10,100),
data = raindata, coord = coord, ut = ut, nu = nu.best)
